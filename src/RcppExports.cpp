// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// binomialTree
DataFrame binomialTree(double S, double K, double T, double r, double u, double d, double p, int steps);
RcppExport SEXP _StructuredEdge_binomialTree(SEXP SSEXP, SEXP KSEXP, SEXP TSEXP, SEXP rSEXP, SEXP uSEXP, SEXP dSEXP, SEXP pSEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type u(uSEXP);
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(binomialTree(S, K, T, r, u, d, p, steps));
    return rcpp_result_gen;
END_RCPP
}
// blackScholes
DataFrame blackScholes(double S, double K, double T, double r, double sigma, double b);
RcppExport SEXP _StructuredEdge_blackScholes(SEXP SSEXP, SEXP KSEXP, SEXP TSEXP, SEXP rSEXP, SEXP sigmaSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(blackScholes(S, K, T, r, sigma, b));
    return rcpp_result_gen;
END_RCPP
}
// exchangeForward
DataFrame exchangeForward(double S, double T, double r_d, double r_f);
RcppExport SEXP _StructuredEdge_exchangeForward(SEXP SSEXP, SEXP TSEXP, SEXP r_dSEXP, SEXP r_fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type r_d(r_dSEXP);
    Rcpp::traits::input_parameter< double >::type r_f(r_fSEXP);
    rcpp_result_gen = Rcpp::wrap(exchangeForward(S, T, r_d, r_f));
    return rcpp_result_gen;
END_RCPP
}
// finForwardContract
DataFrame finForwardContract(double S, double T, double r);
RcppExport SEXP _StructuredEdge_finForwardContract(SEXP SSEXP, SEXP TSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(finForwardContract(S, T, r));
    return rcpp_result_gen;
END_RCPP
}
// irForward
DataFrame irForward(double r1, double t1, double t2, double t_min, double t_max, double t_step);
RcppExport SEXP _StructuredEdge_irForward(SEXP r1SEXP, SEXP t1SEXP, SEXP t2SEXP, SEXP t_minSEXP, SEXP t_maxSEXP, SEXP t_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< double >::type t_min(t_minSEXP);
    Rcpp::traits::input_parameter< double >::type t_max(t_maxSEXP);
    Rcpp::traits::input_parameter< double >::type t_step(t_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(irForward(r1, t1, t2, t_min, t_max, t_step));
    return rcpp_result_gen;
END_RCPP
}
// physForwardContract
DataFrame physForwardContract(double S, double T, double r, double c);
RcppExport SEXP _StructuredEdge_physForwardContract(SEXP SSEXP, SEXP TSEXP, SEXP rSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type S(SSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(physForwardContract(S, T, r, c));
    return rcpp_result_gen;
END_RCPP
}
// physicalSwap
DataFrame physicalSwap(double quantity, double fixed_price, double spot_price);
RcppExport SEXP _StructuredEdge_physicalSwap(SEXP quantitySEXP, SEXP fixed_priceSEXP, SEXP spot_priceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type quantity(quantitySEXP);
    Rcpp::traits::input_parameter< double >::type fixed_price(fixed_priceSEXP);
    Rcpp::traits::input_parameter< double >::type spot_price(spot_priceSEXP);
    rcpp_result_gen = Rcpp::wrap(physicalSwap(quantity, fixed_price, spot_price));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StructuredEdge_binomialTree", (DL_FUNC) &_StructuredEdge_binomialTree, 8},
    {"_StructuredEdge_blackScholes", (DL_FUNC) &_StructuredEdge_blackScholes, 6},
    {"_StructuredEdge_exchangeForward", (DL_FUNC) &_StructuredEdge_exchangeForward, 4},
    {"_StructuredEdge_finForwardContract", (DL_FUNC) &_StructuredEdge_finForwardContract, 3},
    {"_StructuredEdge_irForward", (DL_FUNC) &_StructuredEdge_irForward, 6},
    {"_StructuredEdge_physForwardContract", (DL_FUNC) &_StructuredEdge_physForwardContract, 4},
    {"_StructuredEdge_physicalSwap", (DL_FUNC) &_StructuredEdge_physicalSwap, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_StructuredEdge(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
